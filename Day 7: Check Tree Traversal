Link to My Submission: https://practice.geeksforgeeks.org/viewSol.php?subId=f8244ac2de990f21d438fef336cb258c&pid=704544&user=gopalsays108
   
Problem: Given Preorder, Inorder and Postorder traversals of some tree of size N. The task is to check if they are all of the same tree or not.

Example 1:

Input:
N = 5
preorder[] = {1, 2, 4, 5, 3}
inorder[] = {4, 2, 5, 1, 3}
postorder[] = {4, 5, 2, 3, 1}
Output: Yes
Explanation: 
All of the above three traversals 
are of the same tree.
           1
         /   \
        2     3
      /   \
     4     5
Example 2:

Input:
N = 5
preorder[] = {1, 5, 4, 2, 3}
inorder[] = {4, 2, 5, 1, 3}
postorder[] = {4, 1, 2, 3, 5}
Output: No
Explanation: The three traversals can 
not be of the same tree.

Your Task:
You don't need to read input or print anything. Complete the function checktree() which takes the array preorder[ ], inorder[ ], postorder[ ] and integer N as input parameters and returns true if the three traversals are of the same tree or not. 

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 103
Node values are unique.




My Solution:
class Solution{
    public:
    
bool checktree(int preorder[], int inorder[], int postorder[], int N) 
   { 
    // Your code goes here
    if(N==0)
    return true;
    if(N==1){
        return (preorder[0]==inorder[0]) && (preorder[0]==postorder[0]);
    }
    
    int root=preorder[0],index=-1;
    for(int i=0;i<N;i++){
        if(root==inorder[i]){
            index=i;
            break;
        }
    }
    
    int f=0;
    
    if(index!=-1){
        for(int i=0;i<N;i++){
            if(root==postorder[i]){
                f=1;
                break;
            }
        }
    }
    
    if(index==-1 || f==0)
     return false;
     
    int left_st,right_st;
    left_st= checktree(preorder+1,inorder,postorder,index);
    right_st= checktree(preorder + index + 1, inorder + index + 1, postorder + index, N - index - 1);
    
    return (left_st && right_st);
   } 

};

