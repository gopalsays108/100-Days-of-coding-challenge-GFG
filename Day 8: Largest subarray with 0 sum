Link to My Submission: https://practice.geeksforgeeks.org/viewSol.php?subId=065bdb3e447ee27356d9271c05d87625&pid=700254&user=gopalsays108
   
Problem: Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
Your Task:
You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and returns the length of the largest subarray with 0 sum.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
-1000 <= A[i] <= 1000, for each valid i

Company Tags
 Amazon MakeMyTrip Microsoft
 


My Solution:
class GfG
{
     int maxLen(int arr[], int n)
   {
       HashMap<Integer,Integer> map = new HashMap<>();
       map.put(0,0);
       map.put(arr[0],1);
       int max = 0;
       for(int i = 1;i<n;i++)
       {
           arr[i] +=arr[i-1];
           if(map.containsKey(arr[i]))
           {
               max = Math.max(max,i+1-map.get(arr[i]));
           }else{
               map.put(arr[i],i+1);
           }
       }
       return max;
   
   }
}
